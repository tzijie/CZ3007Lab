// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;
           
// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:
         
   Accessibility = PUBLIC
		  	|
		  	;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY
			;

Imports = Import Imports | ;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations | ;

Declaration = FunctionDeclaration | FieldDeclaration | TypeDeclaration;

			
FunctionDeclaration = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;

StatementList = Statement StatementList | ;

FieldDeclaration = Accessibility TypeName ID SEMICOLON;

TypeDeclaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON;

Accessibility = PUBLIC | ;


TypeName = PrimitiveType | ArrayType | ID;
PrimitiveType = VOID | BOOLEAN | INT;
ArrayType = PrimitiveType LBRACKET RBRACKET | ArrayType LBRACKET RBRACKET | ID LBRACKET RBRACKET ;

ParameterList = ParameterListInner |;
ParameterListInner = Parameter | Parameter COMMA ParameterListInner;
Parameter = TypeName ID;

Statement = TypeName ID SEMICOLON
		  | LCURLY StatementList RCURLY
		  | IF LPAREN Expression RPAREN Statement ELSE Statement
		  | IF LPAREN Expression RPAREN Statement
		  | WHILE LPAREN Expression RPAREN Statement
		  | BREAK SEMICOLON
		  | RETURN SEMICOLON
		  | RETURN Expression SEMICOLON
		  | Expression SEMICOLON
		  ;

Expression = Assignment | RHSExpression;

ExpressionsList = Expression COMMA ExpressionsList
			  | Expression
			  |
			  ;

NonEmptyExpressionsList = Expression COMMA NonEmptyExpressionsList
			  | Expression
			  ;

Assignment = LHSExpression EQL Expression
		   ;

RHSExpression = ArithExpression ComparisonOperator ArithExpression
			  | ArithExpression
			  ;

LHSExpression = ID LHSExpressionRecur
  			  ;

LHSExpressionRecur = LBRACKET Expression RBRACKET LHSExpressionRecur
  			  |
   		      ;
			  
ComparisonOperator = EQEQ
				   | NEQ
				   | LT
				   | LEQ
				   | GT
				   | GEQ
				   ;


ArithExpression = ArithExpression AdditiveOp Term
				| Term
				;

AdditiveOp = PLUS
			| MINUS
			;

Term = Term MultiplicativeOp Factor
		| Factor
		;

MultiplicativeOp = TIMES
				| DIV
				| MOD
				;

Factor = MINUS Factor
		| PriExpression
		;

PriExpression = LHSExpression
				| FunctionCall
				| ArrayExpression
				| STRING_LITERAL
				| INT_LITERAL
				| TRUE
				| FALSE
				| ParenExpression
				;

FunctionCall = ID LPAREN ExpressionsList RPAREN;

ArrayExpression = LBRACKET NonEmptyExpressionsList RBRACKET;
				

ParenExpression = LPAREN Expression RPAREN;


